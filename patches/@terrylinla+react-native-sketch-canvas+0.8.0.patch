diff --git a/node_modules/@terrylinla/react-native-sketch-canvas/index.js b/node_modules/@terrylinla/react-native-sketch-canvas/index.js
index 7935842..538cd54 100644
--- a/node_modules/@terrylinla/react-native-sketch-canvas/index.js
+++ b/node_modules/@terrylinla/react-native-sketch-canvas/index.js
@@ -1,65 +1,14 @@
 import React from 'react'
-import PropTypes from 'prop-types'
 import ReactNative, {
   View,
   Text,
   TouchableOpacity,
   FlatList,
-  ViewPropTypes,
 } from 'react-native'
 import SketchCanvas from './src/SketchCanvas'
 import { requestPermissions } from './src/handlePermissions';
 
 export default class RNSketchCanvas extends React.Component {
-  static propTypes = {
-    containerStyle: ViewPropTypes.style,
-    canvasStyle: ViewPropTypes.style,
-    onStrokeStart: PropTypes.func,
-    onStrokeChanged: PropTypes.func,
-    onStrokeEnd: PropTypes.func,
-    onClosePressed: PropTypes.func,
-    onUndoPressed: PropTypes.func,
-    onClearPressed: PropTypes.func,
-    onPathsChange: PropTypes.func,
-    user: PropTypes.string,
-
-    closeComponent: PropTypes.node,
-    eraseComponent: PropTypes.node,
-    undoComponent: PropTypes.node,
-    clearComponent: PropTypes.node,
-    saveComponent: PropTypes.node,
-    strokeComponent: PropTypes.func,
-    strokeSelectedComponent: PropTypes.func,
-    strokeWidthComponent: PropTypes.func,
-
-    strokeColors: PropTypes.arrayOf(PropTypes.shape({ color: PropTypes.string })),
-    defaultStrokeIndex: PropTypes.number,
-    defaultStrokeWidth: PropTypes.number,
-
-    minStrokeWidth: PropTypes.number,
-    maxStrokeWidth: PropTypes.number,
-    strokeWidthStep: PropTypes.number,
-
-    savePreference: PropTypes.func,
-    onSketchSaved: PropTypes.func,
-
-    text: PropTypes.arrayOf(PropTypes.shape({
-      text: PropTypes.string,
-      font: PropTypes.string,
-      fontSize: PropTypes.number,
-      fontColor: PropTypes.string,
-      overlay: PropTypes.oneOf(['TextOnSketch', 'SketchOnText']),
-      anchor: PropTypes.shape({ x: PropTypes.number, y: PropTypes.number }),
-      position: PropTypes.shape({ x: PropTypes.number, y: PropTypes.number }),
-      coordinate: PropTypes.oneOf(['Absolute', 'Ratio']),
-      alignment: PropTypes.oneOf(['Left', 'Center', 'Right']),
-      lineHeightMultiple: PropTypes.number,
-    })),
-    localSourceImage: PropTypes.shape({ filename: PropTypes.string, directory: PropTypes.string, mode: PropTypes.string }),
-
-    permissionDialogTitle: PropTypes.string,
-    permissionDialogMessage: PropTypes.string,
-  };
 
   static defaultProps = {
     containerStyle: null,
diff --git a/node_modules/@terrylinla/react-native-sketch-canvas/src/SketchCanvas.js b/node_modules/@terrylinla/react-native-sketch-canvas/src/SketchCanvas.js
index 8f4fe48..15a33d3 100644
--- a/node_modules/@terrylinla/react-native-sketch-canvas/src/SketchCanvas.js
+++ b/node_modules/@terrylinla/react-native-sketch-canvas/src/SketchCanvas.js
@@ -1,7 +1,6 @@
 'use strict';
 
 import React from 'react'
-import PropTypes from 'prop-types'
 import ReactNative, {
   requireNativeComponent,
   NativeModules,
@@ -9,7 +8,6 @@ import ReactNative, {
   PanResponder,
   PixelRatio,
   Platform,
-  ViewPropTypes,
   processColor
 } from 'react-native'
 import { requestPermissions } from './handlePermissions';
@@ -23,36 +21,6 @@ const RNSketchCanvas = requireNativeComponent('RNSketchCanvas', SketchCanvas, {
 const SketchCanvasManager = NativeModules.RNSketchCanvasManager || {};
 
 class SketchCanvas extends React.Component {
-  static propTypes = {
-    style: ViewPropTypes.style,
-    strokeColor: PropTypes.string,
-    strokeWidth: PropTypes.number,
-    onPathsChange: PropTypes.func,
-    onStrokeStart: PropTypes.func,
-    onStrokeChanged: PropTypes.func,
-    onStrokeEnd: PropTypes.func,
-    onSketchSaved: PropTypes.func,
-    user: PropTypes.string,
-
-    touchEnabled: PropTypes.bool,
-
-    text: PropTypes.arrayOf(PropTypes.shape({
-      text: PropTypes.string,
-      font: PropTypes.string,
-      fontSize: PropTypes.number,
-      fontColor: PropTypes.string,
-      overlay: PropTypes.oneOf(['TextOnSketch', 'SketchOnText']),
-      anchor: PropTypes.shape({ x: PropTypes.number, y: PropTypes.number }),
-      position: PropTypes.shape({ x: PropTypes.number, y: PropTypes.number }),
-      coordinate: PropTypes.oneOf(['Absolute', 'Ratio']),
-      alignment: PropTypes.oneOf(['Left', 'Center', 'Right']),
-      lineHeightMultiple: PropTypes.number,
-    })),
-    localSourceImage: PropTypes.shape({ filename: PropTypes.string, directory: PropTypes.string, mode: PropTypes.oneOf(['AspectFill', 'AspectFit', 'ScaleToFill']) }),
-
-    permissionDialogTitle: PropTypes.string,
-    permissionDialogMessage: PropTypes.string,
-  };
 
   static defaultProps = {
     style: null,
